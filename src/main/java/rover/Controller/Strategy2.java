// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package rover.Controller;


import java.util.concurrent.TimeUnit;

import javax.swing.Timer;

import Simulator.RoverTimer;
import rover.Controller.IStrategy;
import rover.Model.IVisitableArea;
import rover.Model.Rover;

/************************************************************/
/**
 * 
 */
public class Strategy2 implements IStrategy {
	/**
	 * 
	 */
	private IVisitableArea currentArea;
	
	public Strategy2() {
		currentArea = null;
	}
	
	public void pauseRover2s(Rover rover){
		rover.pauseRover();
		int delay = 2000; //milliseconds
		RoverTimer taskPerformer = new RoverTimer(rover);
		Timer timer = new Timer(delay, taskPerformer);
		timer.start();
		timer.setRepeats(false);
	}
	
	private void enterNewAreaRule(Rover rover) {
		if(!rover.getAreas().isEmpty()) {
			//System.out.println(currentArea);
			if(currentArea == null) {
				currentArea = rover.getAreas().get(0);
			}
			if(currentArea != rover.getAreas().get(0)) {
				this.pauseRover2s(rover);
				currentArea = rover.getAreas().get(0);
			}
		}
	}


	@Override
	public void applyBehaviour(Rover rover) {
		//System.out.println(rover.getPosition());
		if(!rover.isSleeping()) { // the rover has a mission to perform
			if(rover.isAtPosition(rover.getDestination()) && !rover.isPaused()) {
				rover.goToNextPoint();
			}
			rover.getAccessManager().manageAccess(rover);
			enterNewAreaRule(rover);
		}
	}
};
