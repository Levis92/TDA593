// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package rover.Controller;

import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import project.Point;
import rover.Controller.IMissionManager;
import rover.Model.Mission;
import rover.Model.Rover;

/************************************************************/
/**
 * 
 */
public class MissionManager implements IMissionManager {
	/**
	 * 
	 */
	public List<Mission> missionList = new LinkedList<Mission>();
	/**
	 * 
	 */
	public List<Rover> roverList = new LinkedList<Rover>();
	/**
	 * 
	 * @return 
	 */
	public List<Mission> getMissions() {
		return missionList;
	}

	/**
	 * 
	 * @return 
	 */
	public List<Rover> getRovers() {
		return roverList;
	}

	/**
	 * 
	 * @param rover 
	 * @return 
	 */
	public boolean checkRoverAvailability(Rover rover) {
		return rover.isSleeping();
	}

	/**
	 * @param mission             
	 * @return             
	 */
	public boolean removeAllMissions() {
		for (int i = 0; i < missionList.size(); i++) {
			missionList.add(i, null);
		}
		return true;
	}

	/**
	 * @param mission             
	 * @return             
	 */
	public boolean pauseAllMissions() {
		for (Rover rover: roverList) {
			rover.pauseRover();
		}
		return true;
	}

	/**
	 * 
	 * @return 
	 */
	public boolean continueAllMissions() {
		for (Rover rover  : roverList) {
			rover.continueRover();
		}
		return true;
	}

	/**
	 * 
	 * @param rover 
	 * @return 
	 */
	public boolean pauseMission(Rover rover) {
		boolean isPaused = rover.pauseRover();
		return isPaused;
	}

	/**
	 * 
	 * @param rover 
	 * @return 
	 */
	public boolean continueMission(Rover rover) {
		boolean isPaused = rover.pauseRover();
		return isPaused;
	}

	/**
	 * 
	 * @param rover 
	 * @return 
	 */
	public boolean removeMission(Rover rover) {
		boolean isRemoved = rover.removeMission();
		return isRemoved;
	}

	/**
	 * 
	 * @param points 
	 * @return 
	 * @param rover 
	 */
	public boolean createMission(List<Point> points, Rover rover, IStrategy strategy) {
		Mission mission = new Mission(points);
		rover.provideMission(mission, strategy);
		boolean isAdded = missionList.add(mission);
		return isAdded;
	}

	/**
	 * 
	 * @param rovers 
	 */
	public MissionManager(Set<Rover> rovers) {
		List<Rover> temp = new LinkedList<Rover>();
		temp.addAll(rovers);
		roverList = temp;
	}
};
